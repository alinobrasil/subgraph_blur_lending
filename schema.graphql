type Lien @entity {
  id: ID! #lienId from event
  collection: Bytes!
  tokenId: BigInt!
  borrower: Borrower!
  timeStarted: BigInt!
  auctionDuration: BigInt
  auctionStarted: BigInt
  # repayTime: BigInt
  # seizeTime: BigInt
  status: String!
  loans: [Loan!]! @derivedFrom(field: "lien")   #multiple loans can be associated with each lien
}

type Loan @entity {
  id: ID! #lienId_[loan #]
  lienId: String
  lender: Bytes!
  loanAmount: BigInt!
  rate: BigInt!
  startTime: BigInt!
  endTime: BigInt
  lien: Lien!     #lien associated with the loan
}

type Token @entity {
  id: ID!    #collection_tokenId         
  collection: Bytes!  
  tokenId: BigInt!
  uri: String!
  lien: Lien!   #can be updated 
}

type TokenMetaData @entity(immutable: true) {
  id: ID!   #uri
  image: String!
  earring: String    # 7 possible traits
  background: String
  fur: String
  eyes: String
  mouth: String
  hat: String
  clothes: String
}

type Repayment @entity {
  id: ID!
  lien: Lien!   #loan associated with the repayment
  repaidAmount: BigInt! 
  time: BigInt!
  borrower: Borrower!   #borrower associated with the repayment
}

type Borrower @entity {
  id: ID!
  payments: [Repayment!]! @derivedFrom(field: "borrower")   
  collateral: [Lien!]! @derivedFrom(field: "borrower")
}